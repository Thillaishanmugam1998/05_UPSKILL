GENERIC COLLECTIONS IN C# - LIST<T> EXPLAINED
==============================================

What is List<T>?
================
List<T> is a generic collection class that represents a strongly typed list of objects 
that can be accessed by index. The T is a type parameter that you specify when creating 
the list.

Basic Usage
===========
// Creating a list of integers
List<int> numbers = new List<int>();

// Creating a list of strings
List<string> names = new List<string>();

// Creating a list with initial values
List<int> scores = new List<int> { 85, 92, 78, 96 };


Key Benefits of Generic Lists
=============================
1. Type Safety: The compiler ensures you can only add the specified type to the list.

Example:
List<string> cities = new List<string>();
cities.Add("New York");     // âœ“ Valid
cities.Add("London");       // âœ“ Valid
// cities.Add(123);         // âœ— Compiler error

2. Performance: No boxing/unboxing for value types, unlike non-generic collections 
   like ArrayList.

3. IntelliSense Support: Better IDE support since the type is known at compile time.


Common Operations
=================
List<string> fruits = new List<string>();

// Adding elements
fruits.Add("Apple");
fruits.Add("Banana");
fruits.AddRange(new[] { "Orange", "Grape" });

// Accessing elements
string firstFruit = fruits[0];                    // "Apple"
string lastFruit = fruits[fruits.Count - 1];      // "Grape"

// Checking existence
bool hasApple = fruits.Contains("Apple");          // true

// Removing elements
fruits.Remove("Banana");                           // Removes first occurrence
fruits.RemoveAt(0);                                // Removes element at index 0

// Iterating
foreach (string fruit in fruits)
{
    Console.WriteLine(fruit);
}

// Finding elements
string foundFruit = fruits.Find(f => f.StartsWith("O"));        // "Orange"
List<string> longNames = fruits.FindAll(f => f.Length > 5);


When to Use List<T>
===================
Use List<T> when you need:
- A resizable array-like structure
- Fast access by index
- Frequent additions and removals
- Type safety for your collection elements
- LINQ support for querying data

List<T> is the go-to choice for most scenarios where you need a dynamic collection 
of items of the same type in C#.


Additional Notes
================
- List<T> is part of System.Collections.Generic namespace
- It implements IList<T>, ICollection<T>, and IEnumerable<T> interfaces
- Default capacity starts at 0 and grows as needed
- You can specify initial capacity: new List<int>(100)
- Use Clear() method to remove all elements
- Use Sort() method to sort elements in place